
<div id="Chart1"/>
</div>
<div id="Chart2"/>
</div>
<div id="Chart3"/>
</div>
<div id="Chart4"/>
</div>

<div id="datatable">
    <table id="dc-data-table">
      <thead>
      <tr>
        <th data-dynatable-column="Engagement" style="width:32%;">Engagement</th>
        <th data-dynatable-column="Role"  style="width:20%;">Role</th>
        <th data-dynatable-column="Name"  style="width:20%;">Name</th>
        <th data-dynatable-column="Day"  style="width:7%;" data-dynatable-sorts="parsedDay">Day</th>
        <th data-dynatable-column="Rate" style="width:7%;">Rate</th>
        <th data-dynatable-column="Hours" style="width:7%;">Hours</th>
        <th data-dynatable-column="Amount" style="width:7%;">Amount</th>
      </tr>
      </thead>
    </table>
</div>

<script type="text/javascript">

    var scoreCard = {
        initChart: function()
        {
            var compositeChart = dc.compositeChart("#Chart1");
            var clientChart = dc.rowChart("#Chart3");
            var deptChart = dc.rowChart("#Chart4");
            var clients = [
                {search: "ACG", display: "ACG"},
                {search: "Fiat", display: "Fiat"},
                {search: "DPC", display: "DPC"},
                {search: "ADT", display: "ADT"},
                {search: "Arby", display: "Arby"},
                {search: "Dealer Asset", display: "Ford"},
                {search: "DADS", display: "Ford"},
                {search: "Things Remembered", display: "TR"},
                {search: "M-Drive", display: "Mazda"},
                {search: "Infrastructure", display: "Internal"} ,
                {search: "Business Development", display: "Internal"}
                    ];
            var departments = [
                {search: "Project Manager", display: "PPM"},
                {search: "Project Mgr", display: "PPM"},
                {search: "Designer", display: "Creative"},
                {search: "Production Supervisor", display: "Creative"},
                {search: "Account", display: "Client Services"},
                {search: "Creative", display: "Creative"},
                {search: "Developer", display: "Development"},
                {search: "Director", display: "Directors"},
                {search: "MIS Manager", display: "Directors"},
                {search: "MIS Program Coordinator", display: "System Administrator"},
                {search: "MIS", display: "Development"},
                {search: "Dir-Database Marketing/Res", display: "Directors"},
                {search: "Program Admin", display: "AMS"},
                {search: "CS Administrator", display: "AMS"},
                {search: "System Administrator", display: "System Administrator"},
                {search: "Program Admin", display: "AMS"}
            ];

            d3.tsv("actuals.tab", function(error, data) {
                var inputFormat = d3.time.format("%-m/%d/%Y");
                data.forEach(function(x) {
                    //Engagement,Project,Role,Name,Date,Rate,Hours,Amount
                    x.Day = x.Date;
                    x.parsedDay = inputFormat.parse(x.Date);
                    x.Date = d3.time.month.floor(inputFormat.parse(x.Date));
                    x.Rate = +(x.Rate.replace('$',''));
                    x.Hours = +x.Hours;
                    x.Amount = +(x.Amount.replace('$','').replace(',','').replace(' ', ''));
                    x.Client = "Other";

                    for(var i = 0; i < clients.length; i++)
                    {
                        if(x.Engagement.indexOf(clients[i].search) > -1)
                        {
                            x.Client = clients[i].display;
                            break;
                        }
                    }
                    x.Department = "Other";
                    for(var i = 0; i < departments.length; i++)
                    {
                        if(x.Role.indexOf(departments[i].search) > -1)
                        {
                            x.Department = departments[i].display;
                            break;
                        }
                    }
                });
                var timeExtent = d3.extent(data, function(d) { return d.Date});
                timeExtent[0].setDate(timeExtent[0].getDate()-15);
                timeExtent[1].setDate(timeExtent[1].getDate()+15);;

                var ndx                 = crossfilter(data),
                        groupByAmount   = function(d) {return d.Amount;},
                        tableDimension  = ndx.dimension(function(d) {return d.Date;}),
                        monthDimension  = ndx.dimension(function(d) {return d.Date;}),
                        amountGroup     = monthDimension.group().reduceSum(groupByAmount),
                        clientDimension = ndx.dimension(function(d) {return d.Client;}),
                        clientGroup     = clientDimension.group().reduceSum(groupByAmount),
                        deptDimension   = ndx.dimension(function(d) {return d.Department;}),
                        deptGroup       = deptDimension.group().reduceSum(groupByAmount);

                var laborAmounts = [];

                laborAmounts.push(monthDimension.group().reduce(
                        function(p, d){return p;},
                        function(p, d){return p;},
                        function(){
                            return { Actual: 0,  Budget: 0, Client: ""};
                        }
                ));
                clientDimension.group().all().forEach(function(client){
                    laborAmounts.push(monthDimension.group().reduce(
                            function(p, d){
                                if(d.Client == client.key){
                                    p.Actual += d.Amount;
                                    p.Budget += d.Amount*.9;
                                    p.Client = d.Client;
                                }
                                return p;
                            },
                            function(p, d){
                                if(d.Client == client.key){
                                    p.Actual -= d.Amount;
                                    p.Budget -= d.Amount*.9;
                                    p.Client = d.Client;
                                }
                                return p;
                            },
                            function(){
                                return { Actual: 0,  Budget: 0, Client: ""};
                            }
                    ));
                });
                laborAmounts.push(monthDimension.group().reduce(
                        function(p, d){return p;},
                        function(p, d){return p;},
                        function(){
                            return { Actual: 0,  Budget: 0, Client: ""};
                        }
                ));

                var group = laborAmounts.pop();

                var actuals = dc.barChart(compositeChart)
                        .gap(55)
                        .group(group)
                        .valueAccessor(function (d) {
                            return d.value.Actual;
                        });
                var budgets = dc.barChart(compositeChart)
                        .gap(55)
                        .group(group)
                        .valueAccessor(function (d) {
                            return d.value.Budget;
                        });

                laborAmounts.forEach(function(sum){
                    actuals.stack(sum);
                    budgets.stack(sum);
                });

                compositeChart
                    .width(1000)
                    .height(300)
                    .transitionDuration(100)
                    .margins({top: 20, right: 10, bottom: 40, left: 50})
                    .dimension(monthDimension)
                    .group(group)
                    .elasticY(true)
                    .x(d3.time.scale().domain(timeExtent))
                    .xUnits(d3.time.months)
                    .round(d3.time.month.round)
                    .renderHorizontalGridLines(true)
                    .compose([actuals, budgets])
                    .brushOn(false)
                    .renderlet(function (chart) {
                        chart.selectAll("g._1").attr("transform", "translate(" + 1 + ", 0)");
                        chart.selectAll("g._0").attr("transform", "translate(" + -29 + ", 0)");
                    });

                var monthFormat = d3.time.format("%b %Y");
                compositeChart.xAxis().tickFormat(function(v) {return monthFormat(v);});
                compositeChart.yAxis().ticks(4);


                var clientList = ["Ford",   "ACG",     "Fiat",    "DPC",     "ADT",     "Arby",    "TR",      "Mazda",   "Internal"];
                var colors =     ["#6b6ecf", "#ffbb78", "#9467bd", "#9edae5", "#e7cb94", "#d6616b", "#e377c2", "#a1d99b", "#bdbdbd"];
                var colorTheChart = function(c) {
                    d3.selectAll('rect.bar').each(function (d,i){
                        var colorIndex = _.indexOf(clientList, d.data.value.Client);
                        if(_.indexOf(this.classList, "deselected") > -1)
                            this.setAttribute('style', 'fill: #c7c7c7;' );
                        else if(colorIndex > -1)
                            this.setAttribute('style', 'fill: ' + colors[colorIndex] + ';' );
                        else this.setAttribute('style', 'fill: yellow;' );
                    });
                };
                compositeChart.on("postRedraw", colorTheChart);
                compositeChart.on("postRender", colorTheChart);

                clientChart
                        .width(400)
                        .height(280)
                        .dimension(clientDimension)
                        .group(clientGroup)
                        .elasticX(true)
                        .colors(
                                d3.scale.ordinal()
                                        .domain(clientList)
                                        .range(colors)
                        )
                        .xAxis().ticks(4).tickFormat(function(v) {return accounting.formatMoney(v, "$", 0);});

                deptChart
                        .width(500)
                        .height(280)
                        .colors(d3.scale.ordinal().domain([""]).range(["#7f7f7f"]))
                        .dimension(deptDimension)
                        .group(deptGroup)
                        .elasticX(true)
                        .xAxis().ticks(4).tickFormat(function(v) {return accounting.formatMoney(v, "$", 0);});

                var dynatable = $('#dc-data-table').dynatable({
                    dataset: {
                        records: tableDimension.top(Infinity),
                        perPageDefault: 50,
                        perPageOptions: [50, 100, 200, 500, 1000, 2000, 5000 ,10000]
                    }
                }).data('dynatable');

                function RefreshTable() {
                    dc.events.trigger(function () {
                        dynatable.settings.dataset.originalRecords = tableDimension.top(Infinity);
                        dynatable.process();
                    });
                };
                for (var i = 0; i < dc.chartRegistry.list().length; i++) {
                    var chartI = dc.chartRegistry.list()[i];
                    chartI.on("filtered", RefreshTable);
                }
                RefreshTable();

                dc.renderAll();
            });
        }
    };
    scoreCard.initChart();
</script>